import requests

print("Consulta de CEP - ViaCEP API")
print("=" * 30)

# Solicita o CEP ao usu√°rio
cep = input("Digite o CEP (apenas n√∫meros): ").strip()

# Verifica se o CEP tem 8 d√≠gitos
if len(cep) != 8 or not cep.isdigit():
    print("\nErro: CEP inv√°lido! Deve conter exatamente 8 d√≠gitos num√©ricos.")
    exit()

# Monta a URL da API
url = f"https://viacep.com.br/ws/{cep}/json/"

try:
    # Faz a requisi√ß√£o √† API
    resposta = requests.get(url)
    
    # Verifica se houve erro na requisi√ß√£o HTTP
    resposta.raise_for_status()
    
    # Converte a resposta para JSON
    dados = resposta.json()
    
    # Verifica se o CEP foi encontrado
    if "erro" in dados:
        print("\nCEP n√£o encontrado!")
    else:
        # Formata os dados para exibi√ß√£o
        cep_formatado = f"{dados['cep'][:5]}-{dados['cep'][5:]}"
        
        print("\nEndere√ßo encontrado:")
        print("=" * 30)
        print(f"üìç CEP: {cep_formatado}")
        print(f"üè† Logradouro: {dados.get('logradouro', 'N/A')}")
        print(f"üè° Bairro: {dados.get('bairro', 'N/A')}")
        print(f"üèôÔ∏è Cidade: {dados.get('localidade', 'N/A')}")
        print(f"üåÜ Estado: {dados.get('uf', 'N/A')}")
        print("=" * 30)

except requests.exceptions.HTTPError:
    print("\nErro: Falha na comunica√ß√£o com a API ViaCEP!")
except requests.exceptions.ConnectionError:
    print("\nErro: Sem conex√£o com a internet!")
except requests.exceptions.Timeout:
    print("\nErro: Tempo de espera esgotado!")
except requests.exceptions.RequestException:
    print("\nErro: Problema inesperado ao acessar a API!")
except ValueError:
    print("\nErro: Resposta inv√°lida da API!")